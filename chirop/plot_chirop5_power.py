#!/usr/bin/env python3
"""
Script pour tracer les courbes de puissance de chirop-5
√† partir des fichiers JSON de m√©triques PowerCap.

Les valeurs n√©gatives dans les fichiers sont converties en positives.
Le graphique est dimensionn√© pour un article sur deux colonnes.
"""

import json
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from datetime import datetime
import numpy as np
import os

# Configuration pour article scientifique (two-column format)
plt.rcParams.update({
    'font.size': 10,
    'font.family': 'sans-serif',
    'font.sans-serif': ['Arial', 'Helvetica', 'DejaVu Sans'],
    'axes.labelsize': 11,
    'axes.titlesize': 12,
    'xtick.labelsize': 9,
    'ytick.labelsize': 9,
    'legend.fontsize': 9,
    'figure.figsize': (7, 4),
    'figure.dpi': 300,
    'lines.linewidth': 1.5,
    'axes.linewidth': 1.2,
    'axes.grid': True,
    'grid.alpha': 0.25,
    'grid.linestyle': '-',
    'grid.linewidth': 0.8,
    'axes.facecolor': '#FAFAFA',
    'figure.facecolor': 'white',
    'axes.edgecolor': '#333333',
    'xtick.color': '#333333',
    'ytick.color': '#333333',
    'text.color': '#333333'
})

def load_chirop5_data(json_file):
    """
    Charge les donn√©es pour chirop-5 depuis un fichier JSON
    
    Args:
        json_file: Chemin vers le fichier JSON
        
    Returns:
        tuple: (timestamps, power_values) o√π les valeurs sont positives
    """
    print(f"üìÇ Chargement de {json_file}...")
    
    with open(json_file, 'r') as f:
        data = json.load(f)
    
    timestamps = []
    power_values = []
    
    for entry in data:
        if entry['device_id'] == 'chirop-5':
            # Convertir timestamp en datetime
            ts = datetime.fromisoformat(entry['timestamp'])
            timestamps.append(ts)
            
            # Convertir valeur n√©gative en positive
            power_values.append(abs(entry['value']))
    
    print(f"   ‚úÖ {len(timestamps)} mesures charg√©es")
    return timestamps, power_values

def load_config_info(txt_file):
    """
    Charge les informations de configuration depuis le fichier txt
    Extrait UNE limite Package et UNE limite DRAM (pas de somme)
    
    Args:
        txt_file: Chemin vers le fichier de configuration
        
    Returns:
        dict: Informations extraites de la configuration
    """
    info = {
        'package_limit': None,
        'dram_limit': None
    }
    
    try:
        with open(txt_file, 'r') as f:
            lines = f.readlines()
        
        current_zone = None
        in_dram = False
        
        for i, line in enumerate(lines):
            # D√©tecter les zones package
            if 'name: package-' in line:
                current_zone = 'package'
                in_dram = False
            elif 'name: dram' in line:
                in_dram = True
                current_zone = 'dram'
            
            # Extraire la premi√®re limite de puissance de chaque type
            if 'power_limit_uw:' in line and 'long_term' in lines[i-1]:
                value = int(line.split(':')[1].strip()) / 1e6  # Conversion en W
                if in_dram and info['dram_limit'] is None:
                    info['dram_limit'] = value
                elif current_zone == 'package' and info['package_limit'] is None:
                    info['package_limit'] = value
        
        print(f"   üìã Config: Package={info['package_limit']}W, DRAM={info['dram_limit']}W")
    except Exception as e:
        print(f"   ‚ö†Ô∏è  Impossible de lire la config: {e}")
    
    return info

def plot_power_curves(data_files, config_files, output_file='chirop5_power_curves.pdf'):
    """
    Trace les courbes de puissance pour les trois exp√©riences
    
    Args:
        data_files: Liste des fichiers JSON
        config_files: Liste des fichiers de configuration
        output_file: Nom du fichier de sortie
    """
    print(f"\nüìä Cr√©ation du graphique de puissance pour chirop-5...")
    
    # Cr√©er la figure avec 3 subplots (un par exp√©rience)
    fig, axes = plt.subplots(3, 1, figsize=(7, 8), sharex=False)
    
    # Couleurs √©l√©gantes et contrast√©es
    colors = ['#2E86AB', '#A23B72', '#F18F01']
    
    for idx, (data_file, config_file, color) in enumerate(zip(data_files, config_files, colors)):
        ax = axes[idx]
        
        # Charger les donn√©es
        timestamps, power_values = load_chirop5_data(data_file)
        config_info = load_config_info(config_file)
        
        # Convertir timestamps en secondes √† partir du d√©but
        time_seconds = [(t - timestamps[0]).total_seconds() for t in timestamps]
        
        # Tracer la courbe de puissance avec style am√©lior√©
        ax.plot(time_seconds, power_values, color=color, linewidth=1.8, 
                alpha=0.95, antialiased=True)
        
        # Pr√©parer les labels pour la l√©gende (sans tracer les lignes)
        legend_labels = []
        if config_info['package_limit']:
            legend_labels.append(f'Package: {config_info["package_limit"]:.0f}W')
        if config_info['dram_limit'] and config_info['dram_limit'] > 0:
            legend_labels.append(f'DRAM: {config_info["dram_limit"]:.0f}W')
        
        # Cr√©er une l√©gende personnalis√©e sans lignes visibles, centr√©e en bas
        if legend_labels:
            from matplotlib.patches import Patch
            legend_elements = [Patch(facecolor='none', edgecolor='none', label=label) for label in legend_labels]
            ax.legend(handles=legend_elements, loc='lower center', frameon=True, 
                     fontsize=9, ncol=len(legend_labels), fancybox=True, 
                     shadow=False, framealpha=0.95, edgecolor='#CCCCCC')
        
        # Configuration de l'axe avec style am√©lior√©
        ax.set_ylabel('Power (W)', fontsize=11, fontweight='normal', color='#333333')
        ax.grid(True, alpha=0.25, linestyle='-', linewidth=0.8, color='#CCCCCC')
        ax.set_facecolor('#FAFAFA')
        ax.spines['top'].set_visible(False)
        ax.spines['right'].set_visible(False)
        ax.spines['left'].set_linewidth(1.2)
        ax.spines['bottom'].set_linewidth(1.2)
        ax.spines['left'].set_color('#666666')
        ax.spines['bottom'].set_color('#666666')
        
        # Am√©liorer les ticks
        ax.tick_params(axis='both', which='major', labelsize=9, 
                      colors='#333333', width=1.2, length=4)
        
        # Commencer l'axe Y √† 0
        ax.set_ylim(bottom=0)
    
    # Label X seulement sur le dernier subplot
    axes[-1].set_xlabel('Time (s)', fontsize=11, fontweight='normal', color='#333333')
    
    # Ajuster l'espacement
    plt.tight_layout(pad=1.5)
    
    # Sauvegarder en PDF (haute qualit√© pour article)
    plt.savefig(output_file, format='pdf', dpi=300, bbox_inches='tight')
    print(f"\nüíæ Graphique sauvegard√©: {output_file}")
    
    # Sauvegarder aussi en PNG pour pr√©visualisation
    png_file = output_file.replace('.pdf', '.png')
    plt.savefig(png_file, format='png', dpi=300, bbox_inches='tight')
    print(f"üíæ Version PNG sauvegard√©e: {png_file}")
    
    # Afficher aussi le graphique
    plt.show()
    
    return fig, axes

def plot_combined_view(data_files, config_files, output_file='chirop5_power_combined.pdf'):
    """
    Trace toutes les courbes sur le m√™me graphique pour comparaison
    
    Args:
        data_files: Liste des fichiers JSON
        config_files: Liste des fichiers de configuration
        output_file: Nom du fichier de sortie
    """
    print(f"\nüìä Cr√©ation du graphique combin√©...")
    
    fig, ax = plt.subplots(figsize=(7, 4.5))
    
    # Couleurs √©l√©gantes et contrast√©es
    colors = ['#2E86AB', '#A23B72', '#F18F01']
    
    all_configs = []
    
    for idx, (data_file, config_file, color) in enumerate(zip(data_files, config_files, colors)):
        timestamps, power_values = load_chirop5_data(data_file)
        config_info = load_config_info(config_file)
        all_configs.append(config_info)
        
        # Normaliser le temps √† partir de 0
        time_seconds = [(t - timestamps[0]).total_seconds() for t in timestamps]
        
        ax.plot(time_seconds, power_values, color=color, linewidth=1.8, 
                alpha=0.95, antialiased=True)
    
    # Cr√©er une l√©gende avec les informations de configuration et les couleurs des courbes
    from matplotlib.lines import Line2D
    legend_elements = []
    
    for idx, (config_info, color) in enumerate(zip(all_configs, colors)):
        if config_info['package_limit']:
            label = f'Package: {config_info["package_limit"]:.0f}W'
            # Cr√©er une ligne color√©e pour la l√©gende
            legend_elements.append(Line2D([0], [0], color=color, linewidth=3, label=label))
    
    # Configuration avec style am√©lior√©
    ax.set_xlabel('Time (s)', fontsize=11, fontweight='normal', color='#333333')
    ax.set_ylabel('Power (W)', fontsize=11, fontweight='normal', color='#333333')
    ax.grid(True, alpha=0.25, linestyle='-', linewidth=0.8, color='#CCCCCC')
    ax.set_facecolor('#FAFAFA')
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    ax.spines['left'].set_linewidth(1.2)
    ax.spines['bottom'].set_linewidth(1.2)
    ax.spines['left'].set_color('#666666')
    ax.spines['bottom'].set_color('#666666')
    
    # Am√©liorer les ticks
    ax.tick_params(axis='both', which='major', labelsize=9, 
                  colors='#333333', width=1.2, length=4)
    
    # Commencer l'axe Y √† 0
    ax.set_ylim(bottom=0)
    
    # L√©gende avec les configurations
    if legend_elements:
        ax.legend(handles=legend_elements, loc='upper right', frameon=True, 
                 fontsize=9, fancybox=True, shadow=False, framealpha=0.95, 
                 edgecolor='#CCCCCC')
    
    plt.tight_layout(pad=1.2)
    
    # Sauvegarder
    plt.savefig(output_file, format='pdf', dpi=300, bbox_inches='tight')
    print(f"üíæ Graphique combin√© sauvegard√©: {output_file}")
    
    png_file = output_file.replace('.pdf', '.png')
    plt.savefig(png_file, format='png', dpi=300, bbox_inches='tight')
    print(f"üíæ Version PNG sauvegard√©e: {png_file}")
    
    plt.show()
    
    return fig, ax

def main():
    """Fonction principale"""
    print("="*80)
    print("üìà TRAC√â DES COURBES DE PUISSANCE - chirop-5")
    print("="*80)
    
    # R√©pertoire des donn√©es
    data_dir = os.path.dirname(os.path.abspath(__file__))
    
    # Fichiers √† traiter (0001, 0002, 0003)
    data_files = [
        os.path.join(data_dir, 'metrics_powercap_lille_chirop_0001.json'),
        os.path.join(data_dir, 'metrics_powercap_lille_chirop_0002.json'),
        os.path.join(data_dir, 'metrics_powercap_lille_chirop_0003.json')
    ]
    
    config_files = [
        os.path.join(data_dir, 'id_0001.txt'),
        os.path.join(data_dir, 'id_0002.txt'),
        os.path.join(data_dir, 'id_0003.txt')
    ]
    
    # V√©rifier que les fichiers existent
    for f in data_files + config_files:
        if not os.path.exists(f):
            print(f"‚ùå Fichier manquant: {f}")
            return
    
    print(f"\n‚úÖ Tous les fichiers trouv√©s\n")
    
    # Cr√©er les graphiques
    print("\n" + "="*80)
    print("1Ô∏è‚É£  Graphiques s√©par√©s (3 subplots)")
    print("="*80)
    fig1, axes1 = plot_power_curves(data_files, config_files, 
                                     output_file='chirop5_power_separate.pdf')
    
    print("\n" + "="*80)
    print("2Ô∏è‚É£  Graphique combin√© (comparaison)")
    print("="*80)
    fig2, ax2 = plot_combined_view(data_files, config_files,
                                    output_file='chirop5_power_combined.pdf')
    
    print("\n" + "="*80)
    print("‚úÖ TRAC√â TERMIN√â AVEC SUCC√àS!")
    print("="*80)
    print(f"""
üìä Fichiers g√©n√©r√©s:
   ‚Ä¢ chirop5_power_separate.pdf (3 subplots)
   ‚Ä¢ chirop5_power_separate.png
   ‚Ä¢ chirop5_power_combined.pdf (vue combin√©e)
   ‚Ä¢ chirop5_power_combined.png

üìê Format: Adapt√© pour article deux colonnes
üé® R√©solution: 300 DPI
üìè Largeur: ~7 inches (adapt√© IEEE two-column)
    """)

if __name__ == "__main__":
    main()
